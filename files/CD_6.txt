AIM-Implement the lexical analyzer using JLex, flex or other lexical analyzer generating tools. 
 
RESOURCE: 
Linux using Putty 
 
PROGRAM LOGIC: 
Read the input string. 
Check whether the string is identifier/ keyword /symbol by using the rules of identifier and keywords using 
LEX Tool 
 
PROCEDURE: 
Go to terminal .Open vi editor ,Lex lex.l , cc lex.yy.c , ./a.out

THEORY-
Lexical analysis is the first phase of a compiler, where the source code is converted into tokens. 
Tools like LEX (or its modern version Flex) automatically generate lexical analyzers from a set of 
patterns and corresponding actions. In this task, we design a LEX program that reads input strings 
and categorizes them into identifiers, keywords, or symbols/operators based on the syntax rules. 
Keywords are reserved words in a language like int, float, if, else, etc., and are matched exactly 
using patterns. Identifiers are names for variables and functions that start with a letter or 
underscore (_) followed by letters, digits, or underscores. Symbols and operators like +, -, ==, &&, etc., 
are matched separately. The algorithm works by reading each token from the input and matching it with predefined 
regular expressions. Upon a match, the corresponding action (like printing "Keyword" or "Identifier") is executed. 
If a token doesn't match any pattern, it is flagged as unknown. This automated token generation simplifies compiler 
development significantly. Learning LEX also builds a strong foundation for understanding complex parsing techniques 
and how programming languages process source code internally.

CODE-
%{
#include <stdio.h>
#include <string.h>

void print_token(char *token);
%}

%%

"int"|"float"|"char"|"if"|"else"|"while"|"for"|"return" {
    printf("Keyword: %s\n", yytext);
}

[a-zA-Z_][a-zA-Z0-9_]* {
    printf("Identifier: %s\n", yytext);
}

"+"|"-"|"*"|"/"|"="|"=="|"!="|"<"|">"|"&&"|"||" {
    printf("Symbol/Operator: %s\n", yytext);
}

[ \t\n]+   /* Ignore whitespace */

.          {
    printf("Unknown Token: %s\n", yytext);
}

%%

int main() {
    printf("Enter input: ");
    yylex();
    return 0;
}

int yywrap() {
    return 1;
}
